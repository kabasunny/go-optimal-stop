// proto_definitions\ml_stock_service.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: ml_stock_service.proto

package experiment_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MLStockService_GetMLStockData_FullMethodName = "/MLStockService/GetMLStockData"
)

// MLStockServiceClient is the client API for MLStockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// サービスの定義
type MLStockServiceClient interface {
	GetMLStockData(ctx context.Context, in *MLStockRequest, opts ...grpc.CallOption) (*MLStockResponse, error)
}

type mLStockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMLStockServiceClient(cc grpc.ClientConnInterface) MLStockServiceClient {
	return &mLStockServiceClient{cc}
}

func (c *mLStockServiceClient) GetMLStockData(ctx context.Context, in *MLStockRequest, opts ...grpc.CallOption) (*MLStockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MLStockResponse)
	err := c.cc.Invoke(ctx, MLStockService_GetMLStockData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MLStockServiceServer is the server API for MLStockService service.
// All implementations must embed UnimplementedMLStockServiceServer
// for forward compatibility.
//
// サービスの定義
type MLStockServiceServer interface {
	GetMLStockData(context.Context, *MLStockRequest) (*MLStockResponse, error)
	mustEmbedUnimplementedMLStockServiceServer()
}

// UnimplementedMLStockServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMLStockServiceServer struct{}

func (UnimplementedMLStockServiceServer) GetMLStockData(context.Context, *MLStockRequest) (*MLStockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMLStockData not implemented")
}
func (UnimplementedMLStockServiceServer) mustEmbedUnimplementedMLStockServiceServer() {}
func (UnimplementedMLStockServiceServer) testEmbeddedByValue()                        {}

// UnsafeMLStockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MLStockServiceServer will
// result in compilation errors.
type UnsafeMLStockServiceServer interface {
	mustEmbedUnimplementedMLStockServiceServer()
}

func RegisterMLStockServiceServer(s grpc.ServiceRegistrar, srv MLStockServiceServer) {
	// If the following call pancis, it indicates UnimplementedMLStockServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MLStockService_ServiceDesc, srv)
}

func _MLStockService_GetMLStockData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MLStockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLStockServiceServer).GetMLStockData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLStockService_GetMLStockData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLStockServiceServer).GetMLStockData(ctx, req.(*MLStockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MLStockService_ServiceDesc is the grpc.ServiceDesc for MLStockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MLStockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MLStockService",
	HandlerType: (*MLStockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMLStockData",
			Handler:    _MLStockService_GetMLStockData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ml_stock_service.proto",
}
